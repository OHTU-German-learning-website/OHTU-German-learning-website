

CREATE OR REPLACE FUNCTION updated_at() RETURNS TRIGGER AS $$
	BEGIN
		NEW.updated_at = NOW();
		RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

ALTER TABLE users ADD COLUMN created_at timestamptz NOT NULL DEFAULT now();
ALTER TABLE users ADD COLUMN updated_at timestamptz NOT NULL DEFAULT now();

CREATE TRIGGER updated_at
    BEFORE UPDATE
    ON public.users
    FOR EACH ROW
EXECUTE FUNCTION updated_at();

CREATE TABLE IF NOT EXISTS forms (
  id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  iso_language_code VARCHAR(2) NOT NULL,
  title TEXT NOT NULL,
  CHECK(iso_language_code = lower(iso_language_code))
)

CREATE TRIGGER updated_at
    BEFORE UPDATE
    ON public.forms
    FOR EACH ROW
EXECUTE FUNCTION updated_at();

CREATE TABLE IF NOT EXISTS form_parts (
  id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  form_id bigint NOT NULL REFERENCES forms(id) ON DELETE RESTRICT,
  title TEXT NOT NULL
)

CREATE TRIGGER updated_at
    BEFORE UPDATE
    ON public.form_parts
    FOR EACH ROW
EXECUTE FUNCTION updated_at();

CREATE TABLE IF NOT EXISTS form_part_questions (
  id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  form_part_id bigint NOT NULL REFERENCES form_parts(id) ON DELETE RESTRICT,
  title TEXT NOT NULL,
)

CREATE TRIGGER updated_at
    BEFORE UPDATE
    ON public.form_part_questions
    FOR EACH ROW
EXECUTE FUNCTION updated_at();

CREATE TABLE IF NOT EXISTS user_form_part_question_answers (
  id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  answer short NOT NULL,
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  form_part_question_id BIGINT NOT NULL REFERENCES form_part_questions(id) ON DELETE RESTRICT,
  UNIQUE(user_id, form_part_question_id)
);

CREATE TRIGGER updated_at
    BEFORE UPDATE
    ON public.user_form_part_step_answers
    FOR EACH ROW
EXECUTE FUNCTION updated_at();